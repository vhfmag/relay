==================================== INPUT ====================================
//- foo.js
graphql`
  fragment fooFirstNameFragment on Query {
   user { firstName }
  }`;
graphql`
  fragment fooLastNameFragment on Query {
   user { lastName }
  }`;
graphql`
  fragment fooDisplayNameFragment on Query {
   user { displayName }
  }`;
graphql`
  query fooQuery @raw_response_type {
   user {
    age
   }
   ...fooFirstNameFragment @defer
   ...fooLastNameFragment @defer
   ...fooDisplayNameFragment @defer
  }`;

//- relay.config.json
{
  "language": "flow",
  "schema": "./schema.graphql",
  "eagerEsModules": true
}

//- schema.graphql
type User { firstName: String, lastName: String, displayName: String, age: Int }
type Query { user: User }

directive @defer(if: Boolean! = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT
==================================== OUTPUT ===================================
//- __generated__/fooDisplayNameFragment.graphql.js
/**
 * <auto-generated> SignedSource<<1ece9f46a81fdbbfd883aae9bf1458ba>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type fooDisplayNameFragment$fragmentType: FragmentType;
export type fooDisplayNameFragment$data = {|
  +user: ?{|
    +displayName: ?string,
  |},
  +$fragmentType: fooDisplayNameFragment$fragmentType,
|};
export type fooDisplayNameFragment$key = {
  +$data?: fooDisplayNameFragment$data,
  +$fragmentSpreads: fooDisplayNameFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "fooDisplayNameFragment",
  "selections": [
    {
      "alias": null,
      "args": null,
      "concreteType": "User",
      "kind": "LinkedField",
      "name": "user",
      "plural": false,
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "displayName",
          "storageKey": null
        }
      ],
      "storageKey": null
    }
  ],
  "type": "Query",
  "abstractKey": null
};

(node/*: any*/).hash = "d3fe765abe703d8735acb1c0493887c1";

export default ((node/*: any*/)/*: Fragment<
  fooDisplayNameFragment$fragmentType,
  fooDisplayNameFragment$data,
>*/);

//- __generated__/fooFirstNameFragment.graphql.js
/**
 * <auto-generated> SignedSource<<2cad64de41c1d6492a59fc6c3e9c9dca>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type fooFirstNameFragment$fragmentType: FragmentType;
export type fooFirstNameFragment$data = {|
  +user: ?{|
    +firstName: ?string,
  |},
  +$fragmentType: fooFirstNameFragment$fragmentType,
|};
export type fooFirstNameFragment$key = {
  +$data?: fooFirstNameFragment$data,
  +$fragmentSpreads: fooFirstNameFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "fooFirstNameFragment",
  "selections": [
    {
      "alias": null,
      "args": null,
      "concreteType": "User",
      "kind": "LinkedField",
      "name": "user",
      "plural": false,
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "firstName",
          "storageKey": null
        }
      ],
      "storageKey": null
    }
  ],
  "type": "Query",
  "abstractKey": null
};

(node/*: any*/).hash = "52952652ae587b0f61e73c3af8343a95";

export default ((node/*: any*/)/*: Fragment<
  fooFirstNameFragment$fragmentType,
  fooFirstNameFragment$data,
>*/);

//- __generated__/fooLastNameFragment.graphql.js
/**
 * <auto-generated> SignedSource<<f51d25fca3ff84d42c337ebe14397cb3>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type fooLastNameFragment$fragmentType: FragmentType;
export type fooLastNameFragment$data = {|
  +user: ?{|
    +lastName: ?string,
  |},
  +$fragmentType: fooLastNameFragment$fragmentType,
|};
export type fooLastNameFragment$key = {
  +$data?: fooLastNameFragment$data,
  +$fragmentSpreads: fooLastNameFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "fooLastNameFragment",
  "selections": [
    {
      "alias": null,
      "args": null,
      "concreteType": "User",
      "kind": "LinkedField",
      "name": "user",
      "plural": false,
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "lastName",
          "storageKey": null
        }
      ],
      "storageKey": null
    }
  ],
  "type": "Query",
  "abstractKey": null
};

(node/*: any*/).hash = "a06cd9d5b77286bcf611f97a4940e8e7";

export default ((node/*: any*/)/*: Fragment<
  fooLastNameFragment$fragmentType,
  fooLastNameFragment$data,
>*/);

//- __generated__/fooQuery.graphql.js
/**
 * <auto-generated> SignedSource<<e4a649d07d5e97b674628bae9d6da28e>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ConcreteRequest, Query } from 'relay-runtime';
import type { fooDisplayNameFragment$fragmentType } from "./fooDisplayNameFragment.graphql";
import type { fooFirstNameFragment$fragmentType } from "./fooFirstNameFragment.graphql";
import type { fooLastNameFragment$fragmentType } from "./fooLastNameFragment.graphql";
export type fooQuery$variables = {||};
export type fooQuery$data = {|
  +user: ?{|
    +age: ?number,
  |},
  +$fragmentSpreads: fooDisplayNameFragment$fragmentType & fooFirstNameFragment$fragmentType & fooLastNameFragment$fragmentType,
|};
export type fooQuery$rawResponse = {|
  +user: ?{|
    +age: ?number,
    +firstName: ?string,
    +lastName: ?string,
    +displayName: ?string,
  |},
|};
export type fooQuery = {|
  rawResponse: fooQuery$rawResponse,
  response: fooQuery$data,
  variables: fooQuery$variables,
|};
*/

var node/*: ConcreteRequest*/ = (function(){
var v0 = {
  "alias": null,
  "args": null,
  "concreteType": "User",
  "kind": "LinkedField",
  "name": "user",
  "plural": false,
  "selections": [
    {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "age",
      "storageKey": null
    }
  ],
  "storageKey": null
};
return {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": null,
    "name": "fooQuery",
    "selections": [
      (v0/*: any*/),
      {
        "kind": "Defer",
        "selections": [
          {
            "args": null,
            "kind": "FragmentSpread",
            "name": "fooFirstNameFragment"
          }
        ]
      },
      {
        "kind": "Defer",
        "selections": [
          {
            "args": null,
            "kind": "FragmentSpread",
            "name": "fooLastNameFragment"
          }
        ]
      },
      {
        "kind": "Defer",
        "selections": [
          {
            "args": null,
            "kind": "FragmentSpread",
            "name": "fooDisplayNameFragment"
          }
        ]
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "fooQuery",
    "selections": [
      (v0/*: any*/),
      {
        "if": null,
        "kind": "Defer",
        "label": "fooQuery$defer$fooFirstNameFragment",
        "selections": [
          {
            "alias": null,
            "args": null,
            "concreteType": "User",
            "kind": "LinkedField",
            "name": "user",
            "plural": false,
            "selections": [
              {
                "alias": null,
                "args": null,
                "kind": "ScalarField",
                "name": "firstName",
                "storageKey": null
              }
            ],
            "storageKey": null
          }
        ]
      },
      {
        "if": null,
        "kind": "Defer",
        "label": "fooQuery$defer$fooLastNameFragment",
        "selections": [
          {
            "alias": null,
            "args": null,
            "concreteType": "User",
            "kind": "LinkedField",
            "name": "user",
            "plural": false,
            "selections": [
              {
                "alias": null,
                "args": null,
                "kind": "ScalarField",
                "name": "lastName",
                "storageKey": null
              }
            ],
            "storageKey": null
          }
        ]
      },
      {
        "if": null,
        "kind": "Defer",
        "label": "fooQuery$defer$fooDisplayNameFragment",
        "selections": [
          {
            "alias": null,
            "args": null,
            "concreteType": "User",
            "kind": "LinkedField",
            "name": "user",
            "plural": false,
            "selections": [
              {
                "alias": null,
                "args": null,
                "kind": "ScalarField",
                "name": "displayName",
                "storageKey": null
              }
            ],
            "storageKey": null
          }
        ]
      }
    ]
  },
  "params": {
    "cacheID": "35d84f976d62f644554b38a6d5f402da",
    "id": null,
    "metadata": {},
    "name": "fooQuery",
    "operationKind": "query",
    "text": "query fooQuery {\n  user {\n    age\n  }\n  ...fooFirstNameFragment @defer(label: \"fooQuery$defer$fooFirstNameFragment\")\n  ...fooLastNameFragment @defer(label: \"fooQuery$defer$fooLastNameFragment\")\n  ...fooDisplayNameFragment @defer(label: \"fooQuery$defer$fooDisplayNameFragment\")\n}\n\nfragment fooDisplayNameFragment on Query {\n  user {\n    displayName\n  }\n}\n\nfragment fooFirstNameFragment on Query {\n  user {\n    firstName\n  }\n}\n\nfragment fooLastNameFragment on Query {\n  user {\n    lastName\n  }\n}\n"
  }
};
})();

(node/*: any*/).hash = "7cd50035a6823553332a1e5a5e632cb9";

export default ((node/*: any*/)/*: Query<
  fooQuery$variables,
  fooQuery$data,
  fooQuery$rawResponse,
>*/);
